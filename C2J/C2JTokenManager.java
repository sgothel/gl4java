/* Generated By:JavaCC: Do not edit this line. C2JTokenManager.java */
import java.util.*;

public class C2JTokenManager implements C2JConstants
{
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2000000010000L) != 0L)
            return 4;
         if ((active1 & 0x80000040000L) != 0L)
            return 49;
         if ((active0 & 0xffffffffffff8000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            return 28;
         }
         return -1;
      case 1:
         if ((active0 & 0x600000200000L) != 0L)
            return 28;
         if ((active0 & 0xffff9fffffdf8000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 1;
            }
            return 28;
         }
         return -1;
      case 2:
         if ((active0 & 0xffff87ffffff8000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 28;
         }
         if ((active0 & 0x180000000000L) != 0L)
            return 28;
         return -1;
      case 3:
         if ((active0 & 0x7f800000000L) != 0L)
            return 28;
         if ((active0 & 0xffff8007ffff8000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x40007e0000000L) != 0L)
            return 28;
         if ((active0 & 0xfffb80001fff8000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x180180001fe00000L) != 0L)
            return 28;
         if ((active0 & 0xe7fa0000001f8000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0xe6e0000000078000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
            return 28;
         }
         if ((active0 & 0x11a000000180000L) != 0L)
            return 28;
         return -1;
      case 7:
         if ((active0 & 0x4e0000000078000L) != 0L)
            return 28;
         if ((active0 & 0xe200000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x200000000000000L) != 0L)
            return 28;
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
            return 28;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 28;
         return -1;
      case 10:
         if ((active0 & 0x8000000000000000L) != 0L)
            return 28;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 11;
            return 28;
         }
         return -1;
      case 12:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 12;
            return 28;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 28;
         return -1;
      case 13:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 13;
            return 28;
         }
         return -1;
      case 14:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 14;
            return 28;
         }
         return -1;
      case 15:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 15;
            return 28;
         }
         return -1;
      case 16:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 16;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 37:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 38:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x21000000L);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      case 42:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 43:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000100000L);
      case 44:
         return jjStopAtPos(0, 72);
      case 45:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4400000200000L);
      case 46:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 47:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 58:
         return jjStopAtPos(0, 74);
      case 59:
         return jjStopAtPos(0, 69);
      case 60:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa000400000L);
      case 61:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 62:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14000800000L);
      case 63:
         return jjStopAtPos(0, 91);
      case 71:
         return jjMoveStringLiteralDfa1_0(0xffff800000000000L, 0x3L);
      case 91:
         return jjStopAtPos(0, 77);
      case 93:
         return jjStopAtPos(0, 78);
      case 94:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x21100008000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000300000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4802000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80200000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1020000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x41cc00000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80040000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10000010000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 70);
      case 124:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14000000L);
      case 125:
         return jjStopAtPos(0, 71);
      case 126:
         return jjStopAtPos(0, 111);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 43:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 45:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 60:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 61:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      case 62:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0xffff800000000000L, active1, 0x3L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1120000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20420000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x104080040000L, active1, 0L);
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xd2100218000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 124:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      case 61:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000000L, active1, 0x3L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20008000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2201000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000040000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000100000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40100a0800000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100008000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa001800040000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x48003000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xd00004000200000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x240110000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000200000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 28);
         break;
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 28);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x2480000L, active1, 0L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2808000000060000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0xb0000020000000L, active1, 0L);
      case 109:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x9004000010000000L, active1, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x240800080000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000100000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8808000L, active1, 0x3L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4800000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x1L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800008008000L, active1, 0L);
      case 107:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 28);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x212000000400000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 28);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 28);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 28);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x2001000000010000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0xd040000000100000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4010000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 28);
         break;
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 28);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 28);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 28);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000080000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000100000L, active1, 0L);
      case 109:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0xa0000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 28);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x48000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8002000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 28);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000020000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000060000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 28);
         break;
      case 105:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000010000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 28);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 28);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 28);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 28);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 28);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 28);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 28);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x1L);
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x1L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 28);
         break;
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);
      case 106:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 63, 28);
         break;
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 106:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 62, 28);
         break;
      case 114:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 64, 28);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
static private final int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private final int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa16_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static private final int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa17_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
static private final int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 106:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(17, 65, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(17, 19);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(27, 29);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(35, 8);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(39, 8);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(17, 19);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 47:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 48:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 52:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddStates(33, 35);
                  break;
               case 57:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 59:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(28);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 50:
                  jjAddStates(0, 2);
                  break;
               case 55:
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  jjCheckNAddTwoStates(58, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   50, 51, 53, 30, 31, 36, 37, 40, 41, 8, 49, 54, 19, 20, 22, 10, 
   12, 45, 47, 2, 4, 5, 8, 19, 20, 24, 22, 32, 33, 8, 40, 41, 
   8, 56, 57, 59, 6, 7, 13, 14, 16, 21, 23, 25, 34, 35, 38, 39, 
   42, 43, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\143\157\156\164\151\156\165\145", "\166\157\154\141\164\151\154\145", 
"\162\145\147\151\163\164\145\162", "\165\156\163\151\147\156\145\144", "\164\171\160\145\144\145\146", 
"\144\145\146\141\165\154\164", "\144\157\165\142\154\145", "\163\151\172\145\157\146", 
"\163\167\151\164\143\150", "\162\145\164\165\162\156", "\145\170\164\145\162\156", 
"\163\164\162\165\143\164", "\163\164\141\164\151\143", "\163\151\147\156\145\144", 
"\167\150\151\154\145", "\142\162\145\141\153", "\165\156\151\157\156", "\143\157\156\163\164", 
"\146\154\157\141\164", "\163\150\157\162\164", "\145\154\163\145", "\143\141\163\145", 
"\154\157\156\147", "\145\156\165\155", "\141\165\164\157", "\166\157\151\144", 
"\143\150\141\162", "\147\157\164\157", "\146\157\162", "\151\156\164", "\151\146", "\144\157", 
"\107\114\166\157\151\144", "\107\114\142\171\164\145", "\107\114\163\150\157\162\164", 
"\107\114\151\156\164", "\107\114\163\151\172\145\151", "\107\114\146\154\157\141\164", 
"\107\114\143\154\141\155\160\146", "\107\114\144\157\165\142\154\145", "\107\114\143\154\141\155\160\144", 
"\107\114\165\142\171\164\145", "\107\114\142\157\157\154\145\141\156", "\107\114\165\163\150\157\162\164", 
"\107\114\165\151\156\164", "\107\114\145\156\165\155", "\107\114\142\151\164\146\151\145\154\144", 
"\107\114\125\161\165\141\144\162\151\143\117\142\152", "\107\114\125\156\165\162\142\163\117\142\152", 
"\107\114\125\164\145\163\163\145\154\141\164\157\162", "\107\114\125\164\162\151\141\156\147\165\154\141\164\157\162\117\142\152", 
null, null, null, "\73", "\173", "\175", "\54", "\75", "\72", "\50", "\51", "\133", 
"\135", "\52", "\56\56\56", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", 
"\74\74\75", "\76\76\75", "\46\75", "\136\75", "\174\75", "\77", "\174\174", "\46\46", 
"\174", "\136", "\46", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", 
"\76\76", "\53", "\55", "\57", "\45", "\53\53", "\55\55", "\176", "\41", "\56", 
"\55\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffe881L, 0x7ffffffffffe7L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static private ASCII_CharStream input_stream;
static private final int[] jjrounds = new int[60];
static private final int[] jjstateSet = new int[120];
static protected char curChar;
public C2JTokenManager(ASCII_CharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public C2JTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 60; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
